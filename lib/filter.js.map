{"version":3,"sources":["../src/filter.js"],"names":["array2pixelData","data","pixels","i","len","length","push","r","g","b","a","pixel2arrayData","imgData","pixel","trimPixels","options","width","height","getDirectionPixel","direction","p","x","index","y","res","undefined","alert","limit","threshold","distance","abs","Math","flag","pl","pt","pr","pb","trim","crop","getVertex","d","isHorizontal","isStartDirct","j","Object","assign","sx","sy","dx","dy","sw","sh"],"mappings":"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","file":"filter.js","sourcesContent":["/**\n * Created by fenghuitao on 17-8-28.\n */\n\n/**\n * 原始getImageData.data 用数组存储rgba信息，转化成pixels对象存储信息，便于操作\n */\nfunction array2pixelData(data) {\n    let pixels = []\n    for (let i = 0, len = data.length; i < len; i += 4) {\n        pixels.push({\n            r: data[i],\n            g: data[i + 1],\n            b: data[i + 2],\n            a: data[i + 3]\n        })\n    }\n    return pixels\n}\n\n/**\n * pixels对象数据还原为getImageData.data 数组格式数据\n */\nfunction pixel2arrayData(pixels, imgData) {\n    let i = 0\n    for (let pixel of pixels) {\n        imgData.data[i++] = pixel.r\n        imgData.data[i++] = pixel.g\n        imgData.data[i++] = pixel.b\n        imgData.data[i++] = pixel.a\n    }\n    return imgData\n}\n\n/**\n * 空白像素处理算法\n * step1: 扫描并标记出可疑白点(flag = 1)\n * step2: 从alpha=0的透明点出发，一旦发现可疑白点直接擦除\n */\nfunction trimPixels(pixels, options) {\n    const width = options.width\n    const height = options.height\n    const getDirectionPixel = (direction, p) => {\n        let x = p.index / width\n        let y = p.index % width\n        let res = null\n        switch (direction) {\n            case 'left': x > 0 ? res = pixels[p.index - 1] : undefined\n                break\n            case 'top': y > 0 ? res = pixels[p.index - width] : undefined\n                break\n            case 'right': x + 1 < width ? res = pixels[p.index + 1] : undefined\n                break\n            case 'bottom': y + 1 < height ? res = pixels[p.index + width] : undefined\n                break\n            default: alert('impossible!')\n        }\n        return res\n    }\n\n    // 扫描并标记出可疑白点\n    const limit = 255 - options.threshold\n    const distance = options.distance\n    const abs = Math.abs\n    let i = 0\n    for (let p of pixels) {\n        p.index = i++\n        if (p.r > limit &&\n            p.g > limit &&\n            p.b > limit &&\n            abs(p.r - p.g) < distance &&\n            abs(p.r - p.b) < distance &&\n            abs(p.g - p.b) < distance) {\n            p.flag = 1\n        }\n    }\n\n    // 擦除点\n    for (let p of pixels) {\n        // if (p.a === 0) //非png 的抠图\n        {\n            let pl = getDirectionPixel('left', p)\n            let pt = getDirectionPixel('top', p)\n            let pr = getDirectionPixel('right', p)\n            let pb = getDirectionPixel('bottom', p)\n            pl && (pl.flag === 1 || !pl.a && !pl.flag) ? pl.a = 0 : undefined\n            pt && (pt.flag === 1 || !pt.a && !pt.flag) ? pt.a = 0 : undefined\n            pr && (pr.flag === 1 || !pr.a && !pr.flag) ? pr.a = 0 : undefined\n            pb && (pb.flag === 1 || !pb.a && !pb.flag) ? pb.a = 0 : undefined\n        }\n    }\n\n    return pixels\n}\n\nexport default {\n    /**\n     * 图像trim算法\n     */\n    trim(imgData, options = {\n        threshold: 30,\n        distance: 20\n    }) {\n        let pixels = array2pixelData(imgData.data);\n        options.width = imgData.width\n        options.height = imgData.height\n        pixel2arrayData(trimPixels(pixels, options), imgData)\n        return imgData\n    },\n    /**\n     * 图像crop裁切，去掉多余的空白背景，按指定尺寸切边\n     */\n    crop(imgData) {\n        const width = imgData.width\n        const height = imgData.height\n        let pixels = array2pixelData(imgData.data)\n        const len = pixels.length\n        const getVertex = (d) => {\n            // 获取上下左右最边上的点, d(direction) = top|right|bottom|left\n            let isHorizontal = (d) => {\n                return d === 'top' || d === 'bottom'\n            }\n            let isStartDirct = (d) => {\n                return d === 'top' || d === 'left'\n            }\n            let i, j, p\n            for (d === 'bottom' ? i = height - 1 : d === 'right' ? i = width - 1 : i = 0; d === 'top' ? i < height : d === 'left' ? i < width : i > 0; isStartDirct(d) ? i++ : i--) {\n                for (j = 0; isHorizontal(d) ? j < width : j < height; j++) {\n                    p = isHorizontal(d) ? pixels[j + i * width] : pixels[i + j * width]\n                    if (p.a !== 0) {\n                        p.x = isHorizontal(d) ? j : i\n                        p.y = isHorizontal(d) ? i : j\n                        return p\n                    }\n                }\n            }\n            return isStartDirct(d) ? Object.assign({\n                x: 0,\n                y: 0\n            }, pixels[0]) :\n                Object.assign({\n                    x: width - 1,\n                    y: height - 1\n                }, pixels[len - 1])\n        }\n\n        let pt = getVertex('top')\n        let pl = getVertex('left')\n        let pb = getVertex('bottom')\n        let pr = getVertex('right')\n        let res = {\n            imgData\n        }\n        res.sx = pt.x < pl.x ? pt.x : pl.x // 需要截取的起始点x坐标\n        res.sy = pt.y < pl.y ? pt.y : pl.y // 需要截取的起始点y坐标\n        res.dx = pr.x > pb.x ? pr.x : pb.x // 需要截取的终点x坐标\n        res.dy = pr.y > pb.y ? pr.y : pb.y // 需要截取的终点y坐标\n        res.sw = res.dx - res.sx + 1 // 截取空白之后留下的有效宽度\n        res.sh = res.dy - res.sy + 1 // 截取空白之后留下的有效高度\n\n        return res\n    }\n}\n"]}